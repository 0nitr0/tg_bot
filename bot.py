# bot.py ‚Äî aiogram 3.x + Flask keep-alive for Render (—Ä—É—á–Ω—ã–µ –≤–µ—Ç–∫–∏, –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ)
import os
import asyncio
import logging
import threading
from flask import Flask

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_TOKEN", "PASTE_YOUR_TOKEN_HERE")
PORT = int(os.getenv("PORT", "8080"))
if not TOKEN or TOKEN == "PASTE_YOUR_TOKEN_HERE":
    print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- Flask keep-alive (Render) ---
app = Flask(__name__)
@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üí°"
def run_web():
    app.run(host="0.0.0.0", port=PORT)
threading.Thread(target=run_web, daemon=True).start()

# ========= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =========
user_state: dict[int, dict] = {}  # {user_id: {"scene": str, "history": [str,...]}}

def ending(text: str) -> str:
    return f"{text}\n\n/restart - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"

def kb(options: dict | None):
    if not options:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/restart")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
        )
    rows = [[KeyboardButton(text=o)] for o in options.keys()]
    rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

async def send_scene(uid: int, msg: Message):
    node = quest[user_state[uid]["scene"]]
    await msg.answer(node["text"], reply_markup=kb(node.get("options")))

# ========= –°–Æ–ñ–ï–¢ (–†–£–ß–ù–û–ô) =========
# –í—Å–µ –≤–µ—Ç–∫–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã —Ä—É–∫–∞–º–∏. –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ ‚Äî –∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –±–ª–æ–∫–∏.
quest: dict[str, dict] = {
    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–∞–±
    "start": {
        "text": "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—à—å—Å—è?",
        "options": {
            "üéì –®–∫–æ–ª–∞": "SCH_INTRO",
            "üè† –î–æ–º": "HOME_INTRO",
            "üåÜ –ì–æ—Ä–æ–¥": "CITY_INTRO",
            "üíº –ö–∞—Ä—å–µ—Ä–∞": "CAR_INTRO",
        }
    },

    # ==== –®–ö–û–õ–ê ====
    "SCH_INTRO": {
        "text": "–®–∫–æ–ª—å–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä, –∑–≤–æ–Ω–æ–∫ –±–ª–∏–∑–∫–æ. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë—à—å?",
        "options": {
            "–¢–µ—Å—Ç –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ": "SCH_MATH",
            "–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å": "SCH_HRM",
            "–û–ª–∏–º–ø–∏–∞–¥–∞": "SCH_OLY",
        }
    },
    "SCH_MATH": {
        "text": "–õ–∏—Å—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π. –ö–∞–∫ –¥–µ–π—Å—Ç–≤—É–µ—à—å?",
        "options": {
            "–°–ø–∏—Å—ã–≤–∞—Ç—å —É —Å–æ—Å–µ–¥–∞": "END_SCH_1",
            "–ß–µ—Å—Ç–Ω–æ —Ä–µ—à–∞—Ç—å": "SCH_MATH_HON",
            "–°–¥–∞—Ç—å –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç": "END_SCH_2",
        }
    },
    "SCH_MATH_HON": {
        "text": "–í—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ, —Ä–µ—à–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
        "options": {
            "–°–¥–∞—Ç—å –≤–æ–≤—Ä–µ–º—è": "END_SCH_3",
            "–ü–∞–Ω–∏–∫–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å": "END_SCH_4",
            "–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É —É —É—á–∏—Ç–µ–ª—è": "END_SCH_5",
        }
    },
    "SCH_HRM": {
        "text": "–£—á–∏—Ç–µ–ª—å –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–µ–ø—Ä–∏—è—Ç–Ω—É—é —Ç–µ–º—É. –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?",
        "options": {
            "–ü–æ—Å–ø–æ—Ä–∏—Ç—å —Å —É—á–∏—Ç–µ–ª–µ–º": "END_SCH_6",
            "–ó–∞—â–∏—Ç–∏—Ç—å –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞": "END_SCH_7",
            "–ü—Ä–æ–º–æ–ª—á–∞—Ç—å": "END_SCH_8",
        }
    },
    "SCH_OLY": {
        "text": "–ó–∞–ø–∏—Å—å –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É. –ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å?",
        "options": {
            "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä": "END_SCH_9",
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä": "END_SCH_10",
            "–í–æ–æ–±—â–µ –Ω–µ –∏–¥—Ç–∏": "END_SCH_11",
        }
    },

    # ==== –î–û–ú ====
    "HOME_INTRO": {
        "text": "–¢–∏—Ö–∏–π –∫–æ—Ä–∏–¥–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ß–µ–º –∑–∞–π–º—ë—à—å—Å—è?",
        "options": {
            "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –±–∞–±—É—à–∫–µ": "HOME_GRAND",
            "–°–∏–¥–µ—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ": "HOME_NET",
            "–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —à—É–º–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏": "HOME_NEIB",
        }
    },
    "HOME_GRAND": {
        "text": "–ë–∞–±—É—à–∫–∞ —Ä–∞–¥–∞ –∑–≤–æ–Ω–∫—É. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
        "options": {
            "–ü–æ–π—Ç–∏ –≤ –≥–æ—Å—Ç–∏": "END_HOME_1",
            "–û—Ç–ª–æ–∂–∏—Ç—å –∑–≤–æ–Ω–æ–∫": "END_HOME_2",
            "–ü–æ–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ä–æ–≥–∞": "END_HOME_3",
        }
    },
    "HOME_NET": {
        "text": "–û—Ç–∫—Ä—ã—Ç –±—Ä–∞—É–∑–µ—Ä. –†–µ—à–∞–π—Å—è.",
        "options": {
            "–°–∫–∞—á–∞—Ç—å –ø–∏—Ä–∞—Ç–∫—É": "END_HOME_4",
            "–ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∏ —Å–µ—Ä–∏–∞–ª": "END_HOME_5",
            "–õ–µ—á—å —Å–ø–∞—Ç—å": "END_HOME_6",
        }
    },
    "HOME_NEIB": {
        "text": "–ù–∞ –ø–ª–æ—â–∞–¥–∫–µ —Å–ª—ã—à–Ω—ã –∫—Ä–∏–∫–∏. –ß—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?",
        "options": {
            "–†–∞–∑–Ω—è—Ç—å –¥—Ä–∞–∫—É": "END_HOME_7",
            "–í—ã–∑–≤–∞—Ç—å –ø–æ–ª–∏—Ü–∏—é": "END_HOME_8",
            "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å": "END_HOME_9",
        }
    },

    # ==== –ì–û–†–û–î ====
    "CITY_INTRO": {
        "text": "–°–µ—Ä—ã–π –≥–æ—Ä–æ–¥, —à—É–º –º–∞—à–∏–Ω. –ö—É–¥–∞ —Å–≤–µ—Ä–Ω—ë—à—å?",
        "options": {
            "–ú–µ—Ç—Ä–æ": "CITY_METRO",
            "–ë–∞–Ω–¥–∏—Ç—ã –≤–æ –¥–≤–æ—Ä–µ": "CITY_GANG",
            "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ": "CITY_RUIN",
        }
    },
    "CITY_METRO": {
        "text": "–ü–æ–µ–∑–¥ —É—Ö–æ–¥–∏—Ç. –¢–≤–æ–π —Ö–æ–¥?",
        "options": {
            "–ó–∞–ø—Ä—ã–≥–Ω—É—Ç—å –≤ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –¥–≤–µ—Ä–∏": "END_CITY_1",
            "–ñ–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–µ–∑–¥": "END_CITY_2",
            "–°–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∞ –ø—É—Ç–∏ (–æ–ø–∞—Å–Ω–æ!)": "END_CITY_3",
        }
    },
    "CITY_GANG": {
        "text": "–¢—Ä–æ–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–Ω–µ–π –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç—Å—è...",
        "options": {
            "–û—Ç–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫": "END_CITY_4",
            "–°–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è": "END_CITY_5",
            "–ë–µ–∂–∞—Ç—å": "END_CITY_6",
        }
    },
    "CITY_RUIN": {
        "text": "–ó–∞–±—Ä–æ—à–∫–∞ –º–∞–Ω–∏—Ç —Ç–µ–º–Ω–æ—Ç–æ–π. –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        "options": {
            "–ó–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—å": "END_CITY_7",
            "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –∏ —É–π—Ç–∏": "END_CITY_8",
            "–ò—Å–∫–∞—Ç—å –≤—Ö–æ–¥ –≤ –ø–æ–¥–≤–∞–ª": "END_CITY_9",
        }
    },

    # ==== –ö–ê–†–¨–ï–†–ê ====
    "CAR_INTRO": {
        "text": "–ö–∞–±–∏–Ω–µ—Ç—ã, –¥–µ–¥–ª–∞–π–Ω—ã, –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∏. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë—à—å?",
        "options": {
            "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ": "CAR_INT",
            "–°—Ç–∞—Ä—Ç–∞–ø": "CAR_ST",
            "–û—Ñ–∏—Å–Ω—ã–µ –∏–Ω—Ç—Ä–∏–≥–∏": "CAR_POL",
        }
    },
    "CAR_INT": {
        "text": "HR —É–ª—ã–±–∞–µ—Ç—Å—è, –Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ...",
        "options": {
            "–ü—Ä–∏—É–∫—Ä–∞—Å–∏—Ç—å —Ä–µ–∑—é–º–µ": "END_CAR_1",
            "–ì–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–¥—É": "END_CAR_2",
            "–°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ": "END_CAR_3",
        }
    },
    "CAR_ST": {
        "text": "–ò–¥–µ—è –∫–∞–∂–µ—Ç—Å—è –≥–µ–Ω–∏–∞–ª—å–Ω–æ–π. –ö–∞–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å?",
        "options": {
            "–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç": "END_CAR_4",
            "–ë–µ–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –Ω–∞ —Å–≤–æ–∏": "END_CAR_5",
            "–ü—Ä–æ–¥–∞—Ç—å –¥–æ–ª—é –ø–∞—Ä—Ç–Ω—ë—Ä—É": "END_CAR_6",
        }
    },
    "CAR_POL": {
        "text": "–ö–æ–ª–ª–µ–≥–∞ –∫–æ—Å—è—á–∏—Ç –∏ –∫–∏–≤–∞–µ—Ç –Ω–∞ —Ç–µ–±—è...",
        "options": {
            "–°–¥–∞—Ç—å –∫–æ–ª–ª–µ–≥—É": "END_CAR_7",
            "–í–∑—è—Ç—å –≤–∏–Ω—É –Ω–∞ —Å–µ–±—è": "END_CAR_8",
            "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å": "END_CAR_9",
        }
    },

    # ==== –ö–û–ù–¶–û–í–ö–ò (–í–°–ï ‚Äî –°–ú–ï–†–¢–ò) ====
    # –®–ö–û–õ–ê (11)
    "END_SCH_1": {"text": ending("–¢–µ–±—è –ø–æ–π–º–∞–ª–∏ –Ω–∞ —Å–ø–∏—Å—ã–≤–∞–Ω–∏–∏. –ü–æ–∑–æ—Ä –ø–µ—Ä–µ–∂–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.") , "options": {}},
    "END_SCH_2": {"text": ending("–ü—É—Å—Ç–æ–π –ª–∏—Å—Ç ‚Äî –ø—É—Å—Ç–æ–µ –±—É–¥—É—â–µ–µ. –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–±–æ—Ä–≤–∞–ª–∞—Å—å.") , "options": {}},
    "END_SCH_3": {"text": ending("–°–¥–∞–ª –≤–æ–≤—Ä–µ–º—è ‚Äî –Ω–æ —Å–µ—Ä–¥—Ü–µ –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è.") , "options": {}},
    "END_SCH_4": {"text": ending("–ü–∞–Ω–∏–∫–∞ –ª–∏—à–∏–ª–∞ —Å–∏–ª. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–æ–∑–≤—É—á–∞–ª –¥–ª—è —Ç–µ–±—è.") , "options": {}},
    "END_SCH_5": {"text": ending("–£—á–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å—Ç–∏–ª –ø–æ–¥—Å–∫–∞–∑–æ–∫. –°—É–¥—å–±–∞ –æ–±–æ—Ä–≤–∞–ª–∞—Å—å.") , "options": {}},
    "END_SCH_6": {"text": ending("–°–ø–æ—Ä –ø–µ—Ä–µ—Ä–æ—Å –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –¢–æ—á–∫–∞.") , "options": {}},
    "END_SCH_7": {"text": ending("–ó–∞—â–∏—â–∞—è –¥—Ä—É–≥–∞, —Ç—ã –ø–∞–ª –≥–µ—Ä–æ–µ–º —à–∫–æ–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞.") , "options": {}},
    "END_SCH_8": {"text": ending("–ú–æ–ª—á–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –ø—Ä–∏–≥–æ–≤–æ—Ä–æ–º. –°–≤–µ—Ç –ø–æ–≥–∞—Å.") , "options": {}},
    "END_SCH_9": {"text": ending("–¢–µ–æ—Ä–∏—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ —Ç–µ–±—è –Ω–∞–≤—Å–µ–≥–¥–∞.") , "options": {}},
    "END_SCH_10":{"text": ending("–ü—Ä–∞–∫—Ç–∏–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–π.") , "options": {}},
    "END_SCH_11":{"text": ending("–®–∞–Ω—Å —É–ø—É—â–µ–Ω. –í—Ä–µ–º—è —Ç–æ–∂–µ.") , "options": {}},

    # –î–û–ú (9)
    "END_HOME_1": {"text": ending("–î–æ—Ä–æ–≥–∞ –≤ –≥–æ—Å—Ç–∏ —Å—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π.") , "options": {}},
    "END_HOME_2": {"text": ending("–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–ª–æ–∂–∏–ª –∏ —Ç–≤–æ—é —Å—É–¥—å–±—É ‚Äî –Ω–∞–≤—Å–µ–≥–¥–∞.") , "options": {}},
    "END_HOME_3": {"text": ending("–ü–∏—Ä–æ–≥ —É–¥–∞–ª—Å—è... –Ω–æ –Ω–µ—Ç.") , "options": {}},
    "END_HOME_4": {"text": ending("–ü–∏—Ä–∞—Ç–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∏—Ä—É—Å—ã, –Ω–æ –∏ —Ñ–∏–Ω–∞–ª.") , "options": {}},
    "END_HOME_5": {"text": ending("–ï–¥–∞, —Å–µ—Ä–∏–∞–ª, –≤–µ—á–Ω–æ—Å—Ç—å. –≠–∫—Ä–∞–Ω –ø–æ–≥–∞—Å –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π.") , "options": {}},
    "END_HOME_6": {"text": ending("–°–æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –≤–µ—á–Ω—ã–º.") , "options": {}},
    "END_HOME_7": {"text": ending("–†–∞–∑–Ω—è—Ç—å –¥—Ä–∞–∫—É ‚Äî —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ—Å–ª–µ–¥–Ω–∏–π.") , "options": {}},
    "END_HOME_8": {"text": ending("–ü–æ–ª–∏—Ü–∏—è –ø—Ä–∏–µ—Ö–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ –∏ –¥–ª—è —Ç–µ–±—è —Ç–æ–∂–µ.") , "options": {}},
    "END_HOME_9": {"text": ending("–ò–≥–Ω–æ—Ä–∏—Ä—É—è —á—É–∂—É—é –±–µ–¥—É, —Ç—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –∏ —Å–≤–æ—é —Å—É–¥—å–±—É.") , "options": {}},

    # –ì–û–†–û–î (9)
    "END_CITY_1": {"text": ending("–î–≤–µ—Ä–∏ –º–µ—Ç—Ä–æ –∑–∞–∫—Ä—ã–ª–∏—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞.") , "options": {}},
    "END_CITY_2": {"text": ending("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—Ç—è–Ω—É–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –≤—Ä–µ–º—ë–Ω.") , "options": {}},
    "END_CITY_3": {"text": ending("–†–µ–ª—å—Å—ã –Ω–µ –ø—Ä–æ—â–∞—é—Ç –æ—à–∏–±–æ–∫.") , "options": {}},
    "END_CITY_4": {"text": ending("–ö–æ—à–µ–ª—ë–∫ —É—à—ë–ª, –∞ –∑–∞ –Ω–∏–º –∏ –∂–∏–∑–Ω—å.") , "options": {}},
    "END_CITY_5": {"text": ending("–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–º.") , "options": {}},
    "END_CITY_6": {"text": ending("–ù–µ —É–±–µ–∂–∞–ª. –ù–µ —É—Å–ø–µ–ª.") , "options": {}},
    "END_CITY_7": {"text": ending("–ó–∞–±—Ä–æ—à–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–∞–π–Ω.") , "options": {}},
    "END_CITY_8": {"text": ending("–°–Ω–∏–º–æ–∫ –ø–æ–ª—É—á–∏–ª—Å—è —É–¥–∞—á–Ω—ã–º. –ü–æ—Å–ª–µ–¥–Ω–∏–º.") , "options": {}},
    "END_CITY_9": {"text": ending("–ü–æ–¥–≤–∞–ª –ø—Ä–∏–Ω—è–ª —Ç–µ–±—è –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞.") , "options": {}},

    # –ö–ê–†–¨–ï–†–ê (9)
    "END_CAR_1": {"text": ending("–õ–æ–∂—å –≤ —Ä–µ–∑—é–º–µ —Å—Ç–æ–∏–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ.") , "options": {}},
    "END_CAR_2": {"text": ending("–ü—Ä–∞–≤–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç, –Ω–æ –Ω–µ —Ç–µ–±—è.") , "options": {}},
    "END_CAR_3": {"text": ending("–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–º –∫–≤–µ—Å—Ç–æ–º.") , "options": {}},
    "END_CAR_4": {"text": ending("–ö—Ä–µ–¥–∏—Ç –æ–∫–∞–∑–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ—à–µ–Ω–∏–µ–º.") , "options": {}},
    "END_CAR_5": {"text": ending("–ë–µ–∑ –¥–µ–Ω–µ–≥ ‚Äî –±–µ–∑ —à–∞–Ω—Å–æ–≤. –ò –±–µ–∑ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.") , "options": {}},
    "END_CAR_6": {"text": ending("–î–æ–ª—é –ø—Ä–æ–¥–∞–ª, —Å–µ–±—è ‚Äî —Ç–æ–∂–µ.") , "options": {}},
    "END_CAR_7": {"text": ending("–ò–Ω—Ç—Ä–∏–≥–∏ –ø–æ—Ö–æ—Ä–æ–Ω–∏–ª–∏ –≤—Å–µ—Ö, –≤–∫–ª—é—á–∞—è —Ç–µ–±—è.") , "options": {}},
    "END_CAR_8": {"text": ending("–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π –ø–æ—Å—Ç—É–ø–æ–∫ —Å—Ç–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º.") , "options": {}},
    "END_CAR_9": {"text": ending("–ü–∞—Å—Å–∏–≤–Ω–æ—Å—Ç—å ‚Äî —Ç–æ–∂–µ –≤—ã–±–æ—Ä. –§–∏–Ω–∞–ª—å–Ω—ã–π.") , "options": {}},
}

# ========= –í–ê–õ–ò–î–ê–¶–ò–Ø (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ) =========
def validate_story():
    errors = []
    total_endings = 0
    for k, v in quest.items():
        opts = v.get("options", {})
        if not opts:
            total_endings += 1
        else:
            for label, target in opts.items():
                if target not in quest:
                    errors.append(f"{k} -> '{label}' -> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ü–µ–Ω–∞ '{target}'")
    if errors:
        print("‚ùå –û—à–∏–±–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ —Å—é–∂–µ—Ç–µ:")
        for e in errors:
            print("  -", e)
    else:
        print(f"‚úÖ –°—é–∂–µ—Ç –≤–∞–ª–∏–¥–µ–Ω. –ö–æ–Ω—Ü–æ–≤–æ–∫: {total_endings}")

# ========= –•–≠–ù–î–õ–ï–†–´ =========
@dp.message(Command("start", "restart"))
async def cmd_start(message: Message):
    user_state[message.from_user.id] = {"scene": "start", "history": []}
    await send_scene(message.from_user.id, message)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def cmd_back(message: Message):
    data = user_state.get(message.from_user.id)
    if not data or not data["history"]:
        await message.answer("–ù–∞–∑–∞–¥ –Ω–µ–ª—å–∑—è.", reply_markup=ReplyKeyboardRemove())
        return
    data["scene"] = data["history"].pop()
    await send_scene(message.from_user.id, message)

@dp.message()
async def handle_choice(message: Message):
    uid = message.from_user.id
    data = user_state.setdefault(uid, {"scene": "start", "history": []})
    node = quest[data["scene"]]
    options = node.get("options", {})
    txt = (message.text or "").strip()

    if txt == "/restart":
        await cmd_start(message)
        return

    if txt not in options:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return

    data["history"].append(data["scene"])
    data["scene"] = options[txt]
    await send_scene(uid, message)

# ========= –ó–ê–ü–£–°–ö =========
async def main():
    validate_story()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
