# bot.py ‚Äî aiogram 3.x + Flask keep-alive for Render
import os
import asyncio
import logging
import random
import threading
from flask import Flask

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

# =========================
# ENV & LOGGING
# =========================
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_TOKEN", "7641482807:AAHfpmCKyIozprig39kzozh8lPeDCufijZE")  # Render: set env TELEGRAM_TOKEN
PORT = int(os.getenv("PORT", "8080"))                         # Render provides PORT for web

if not TOKEN or TOKEN == "PASTE_YOUR_TOKEN_HERE":
    print("‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN!")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =========================
# Flask keep-alive (Render)
# =========================
app = Flask(__name__)

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üí°"

def run_web():
    app.run(host="0.0.0.0", port=PORT)

threading.Thread(target=run_web, daemon=True).start()


# =========================
# GAME DATA
# =========================
# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: scene + —Å—Ç–µ–∫ –∏—Å—Ç–æ—Ä–∏–∏
user_state: dict[int, dict] = {}

def end_text(base: str) -> str:
    return f"{base}\n\n/restart - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"

death_reasons = [
    "—Ç–µ–±—è —Å–±–∏–ª–∞ –º–∞—à–∏–Ω–∞", "–Ω–∞ —Ç–µ–±—è —É–ø–∞–ª –º–µ—Ç–µ–æ—Ä–∏—Ç", "–ø—Ä–∏—à–µ–ª—å—Ü—ã –ø–æ—Ö–∏—Ç–∏–ª–∏ —Ç–µ–±—è",
    "–ø—Ä–∏–∑—Ä–∞–∫ –æ—Ö–ª–∞–¥–µ–ª —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ", "—Ç—ã —É–º–µ—Ä –æ—Ç —Å–∫—É–∫–∏", "—Ç–µ–±—è –ø—Ä–µ–¥–∞–ª–∏ –¥—Ä—É–∑—å—è",
    "—Ç–µ–±—è —Å—ä–µ–ª –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–π –ø–∞—É–∫", "—Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å", "–≤–∑—Ä—ã–≤ —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤—Å—ë –≤–æ–∫—Ä—É–≥",
    "—Ç—ã —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏", "–¥—Ä–µ–≤–Ω–∏–π –∫—É–ª—å—Ç –ø—Ä–∏–Ω—ë—Å —Ç–µ–±—è –≤ –∂–µ—Ä—Ç–≤—É",
    "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤–∑–æ—Ä–≤–∞–ª—Å—è", "–ª–µ—Å—Ç–Ω–∏—Ü–∞ –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–±–æ—Ä–≤–∞–ª–∞—Å—å",
    "–≤ –ª–∏—Ñ—Ç–µ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ", "—Ç—ã —à–∞–≥–Ω—É–ª –≤ –Ω–µ–≤–µ—Ä–Ω—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
    "–±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –¥–æ–≤–µ–ª–∞ –¥–æ –ª–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞", "—É–º–µ—Ä –æ—Ç –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–∞",
    "–≥–æ–ª–µ–º –∏–∑ –±–µ—Ç–æ–Ω–∞ —Ä–∞–∑–¥–∞–≤–∏–ª —Ç–µ–±—è", "—Å–∏—Å—Ç–µ–º–∞ —Ä–µ—à–∏–ª–∞ —É–¥–∞–ª–∏—Ç—å —Ç–µ–±—è –∫–∞–∫ –±–∞–≥",
    "—Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å",
]

def death_line() -> str:
    reason = random.choice(death_reasons)
    variants = [
        f"‚ö∞Ô∏è –¢—ã —É–º–µ—Ä, –ø–æ—Ç–æ–º—É —á—Ç–æ {reason}.",
        f"‚ò†Ô∏è –ö–æ–Ω–µ—Ü. –ü—Ä–∏—á–∏–Ω–∞: {reason}.",
        f"üíÄ –ñ–∏–∑–Ω—å –æ–±–æ—Ä–≤–∞–ª–∞—Å—å ‚Äî {reason}.",
        f"üî• –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∏–≥ –Ω–∞—Å—Ç–∞–ª: {reason}.",
    ]
    return end_text(random.choice(variants))

# –ö–∞—Ä–∫–∞—Å –∫–≤–µ—Å—Ç–∞
quest: dict[str, dict] = {
    "start": {
        "text": "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–æ–≤. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë—à—å?",
        "options": {
            "–°–¥–∞—Ç—å —à–∫–æ–ª—å–Ω—ã–π —Ç–µ—Å—Ç": "school_test",
            "–ò—Å–∫–∞—Ç—å –ø–µ—Ä–≤—É—é –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É": "job_search",
            "–ü–æ–π—Ç–∏ –≤ –ø–∞—Ä–∫": "park_intro",
            "–û—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞": "home_intro",
        },
    },

    # –ù–µ–º–Ω–æ–≥–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω (–∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ç–µ–º—ã + –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ)
    "school_test": {
        "text": "–£—á–∏—Ç–µ–ª—å —Ä–∞–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç—ã. –¢–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è?",
        "options": {
            "–°–ø–∏—Å–∞—Ç—å —É —Å–æ—Å–µ–¥–∞": "caught_cheat",
            "–ß–µ—Å—Ç–Ω–æ —Ä–µ—à–∞—Ç—å": "honest_pass",
            "–ü—Ä–æ–≥—É–ª—è—Ç—å —ç–∫–∑–∞–º–µ–Ω": "skip_exam",
        },
    },
    "caught_cheat": {
        "text": death_line(),
        "options": {},
    },
    "honest_pass": {
        "text": "–¢—ã —Å–¥–∞–ª –¥–æ—Å—Ç–æ–π–Ω–æ. –ö—É–¥–∞ –¥–∞–ª—å—à–µ –ø–æ–≤–µ—Ä–Ω—ë—Ç –∂–∏–∑–Ω—å?",
        "options": {
            "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç": "uni_path",
            "–ö–∞—Ä—å–µ—Ä–∞ —Å—Ä–∞–∑—É": "career_now",
            "–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Å—Ç–æ–ø–æ–º": "travel_start",
        },
    },
    "skip_exam": {
        "text": death_line(),
        "options": {},
    },

    "uni_path": {
        "text": "–°–µ—Å—Å–∏–∏, –ø—Ä–æ–µ–∫—Ç—ã, –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏?",
        "options": {
            "Data Science": "ds_track",
            "–ë–∏–æ–º–µ–¥–∏—Ü–∏–Ω–∞": "bio_track",
            "–ò—Å–∫—É—Å—Å—Ç–≤–æ": "art_track",
            "–ë—Ä–æ—Å–∏—Ç—å —É–Ω–∏–≤–µ—Ä": "drop_uni",
        },
    },
    "career_now": {
        "text": "–ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞, –º–∞–ª–æ —Å–Ω–∞. –ß—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç?",
        "options": {
            "–î–µ–Ω—å–≥–∏ –ª—é–±–æ–π —Ü–µ–Ω–æ–π": "money_max",
            "–ë–∞–ª–∞–Ω—Å": "balance_life",
            "–°–µ–º—å—è": "family_start",
        },
    },
    "travel_start": {
        "text": "–î–æ—Ä–æ–≥–∏, —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ø—É—Ç—á–∏–∫–∏, –≤–µ—á–µ—Ä–Ω–∏–π –∞–≤—Ç–æ—Å—Ç–æ–ø...",
        "options": {
            "–ï—Ö–∞—Ç—å –¥–∞–ª—å—à–µ –≤ –Ω–æ—á—å": "night_ride",
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É –∫–æ—Å—Ç—Ä–∞": "camp_fire",
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π": "home_intro",
        },
    },

    "ds_track": {"text": death_line(), "options": {}},
    "bio_track": {"text": death_line(), "options": {}},
    "art_track": {"text": death_line(), "options": {}},
    "drop_uni": {"text": death_line(), "options": {}},

    "money_max": {"text": death_line(), "options": {}},
    "balance_life": {"text": death_line(), "options": {}},

    "family_start": {
        "text": "–ì–æ–¥—ã —Å–ø—É—Å—Ç—è –≤–æ–ø—Ä–æ—Å –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–∞. –ù–∞ –∫–æ–≥–æ –æ—Ñ–æ—Ä–º–∏—Ç—å?",
        "options": {
            "–ù–∞ —Å—Ç–∞—Ä—à–µ–≥–æ —Å—ã–Ω–∞": "will_son",
            "–ù–∞ –º–ª–∞–¥—à—É—é –¥–æ—á—å": "will_daughter",
            "–ü–æ—Ä–æ–≤–Ω—É –Ω–∞ –≤—Å–µ—Ö": "will_split",
            "–ù–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥": "will_fund",
        },
    },
    "will_son": {"text": death_line(), "options": {}},
    "will_daughter": {"text": death_line(), "options": {}},
    "will_split": {"text": death_line(), "options": {}},
    "will_fund": {"text": death_line(), "options": {}},

    "night_ride": {"text": death_line(), "options": {}},
    "camp_fire": {"text": death_line(), "options": {}},

    "job_search": {
        "text": "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∏: –∫—É—Ä—å–µ—Ä, –±–∞—Ä–∏—Å—Ç–∞, —Ñ—Ä–∏–ª–∞–Ω—Å?",
        "options": {
            "–ö—É—Ä—å–µ—Ä": "courier_path",
            "–ë–∞—Ä–∏—Å—Ç–∞": "barista_path",
            "–§—Ä–∏–ª–∞–Ω—Å": "freelance_path",
        },
    },
    "courier_path": {"text": death_line(), "options": {}},
    "barista_path": {"text": death_line(), "options": {}},
    "freelance_path": {"text": death_line(), "options": {}},

    "park_intro": {
        "text": "–í –ø–∞—Ä–∫–µ –∫ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫...",
        "options": {
            "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å": "mystery_person",
            "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å": "ignore_stranger",
            "–ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞": "ask_advice",
        },
    },
    "mystery_person": {"text": death_line(), "options": {}},
    "ignore_stranger": {"text": death_line(), "options": {}},
    "ask_advice": {"text": death_line(), "options": {}},

    "home_intro": {
        "text": "–î–æ–º–∞ —Ç–∏—Ö–æ. –í –≥–æ–ª–æ–≤–µ —Ç—ã—Å—è—á–∏ –º—ã—Å–ª–µ–π. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        "options": {
            "–ù–∞—á–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫": "journal_start",
            "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º": "call_parents",
            "–õ–µ—á—å —Å–ø–∞—Ç—å": "sleep_now",
        },
    },
    "journal_start": {"text": death_line(), "options": {}},
    "call_parents": {"text": death_line(), "options": {}},
    "sleep_now": {"text": death_line(), "options": {}},
}

# –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–Ω—Ü–æ–≤–∫–∏ (–º–∏—Å—Ç–∏–∫–∞/–ù–õ–û) ‚Äî —Ç–æ–∂–µ —Å–º–µ—Ä—Ç—å
secret_nodes = {
    "secret_ufo": end_text("üëΩ –ù–õ–û –≤—ã—Ä–≤–∞–ª–æ —Ç–µ–±—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í —Ö–æ–ª–æ–¥–Ω–æ–º –∫–æ—Å–º–æ—Å–µ –¥—ã—Ö–∞–Ω–∏–µ –∫–æ–Ω—á–∏–ª–æ—Å—å."),
    "secret_cult": end_text("üïØ –î—Ä–µ–≤–Ω–∏–π –∫—É–ª—å—Ç –Ω–∞—à—ë–ª —Ç–µ–±—è. –†–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à—ë–Ω."),
    "secret_time": end_text("‚è≥ –¢—ã –∑–∞—Å—Ç—Ä—è–ª –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –∏‚Ä¶ –∏—Å—á–µ–∑."),
    "secret_glitch": end_text("üß© –ú–∏—Ä –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–º—É–ª—è—Ü–∏–µ–π. –¢–µ–±—è —É–¥–∞–ª–∏–ª–∏ –∫–∞–∫ –æ—à–∏–±–∫—É."),
}

for key, text in secret_nodes.items():
    quest[key] = {"text": text, "options": {}}

# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–≥—Ä–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å—Ü–µ–Ω –∏ —Å–º–µ—Ä—Ç–µ–π
NUM_SCENES = 400            # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π –¥–æ 800+ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –ø–∞–º—è—Ç—å—é)
CHOICES_PER_SCENE = 4
CONTINUE_PROB = 0.35        # —à–∞–Ω—Å, —á—Ç–æ –≤—ã–±–æ—Ä –≤–µ–¥—ë—Ç –¥–∞–ª—å—à–µ, –Ω–µ –∫ —Å–º–µ—Ä—Ç–∏

random_death_keys: list[str] = []

for i in range(1, NUM_SCENES + 1):
    scene_key = f"S{i}"
    quest[scene_key] = {"text": f"–°—Ü–µ–Ω–∞ #{i}. –¢–≤–æ–π –≤—ã–±–æ—Ä?", "options": {}}
    for j in range(1, CHOICES_PER_SCENE + 1):
        if random.random() < CONTINUE_PROB and i < NUM_SCENES - 1:
            # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª—é–±—É—é –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é —Å—Ü–µ–Ω—É
            nxt = f"S{random.randint(i + 1, NUM_SCENES)}"
            quest[scene_key]["options"][f"–í—ã–±–æ—Ä {j}"] = nxt
        else:
            # —Å–º–µ—Ä—Ç—å
            dkey = f"D{i}_{j}"
            quest[scene_key]["options"][f"–í—ã–±–æ—Ä {j}"] = dkey
            quest[dkey] = {"text": death_line(), "options": {}}
            random_death_keys.append(dkey)

# –°–≤—è–∂–µ–º ¬´—Ä–µ–∞–ª—å–Ω—ã–µ¬ª –≤–µ—Ç–∫–∏ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –±—ã–ª–∞ –≥–∏–≥–∞–Ω—Ç—Å–∫–æ–π
quest["honest_pass"]["options"]["–†–µ–∑–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–¥—å–±—É"] = "S1"
quest["career_now"]["options"]["–°–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–∫"] = "S10"
quest["park_intro"]["options"]["–ò–¥—Ç–∏ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å"] = "S25"
quest["home_intro"]["options"]["–í—ã–π—Ç–∏ –∏–∑ –¥–æ–º–∞ –∏ –∏–¥—Ç–∏"] = "S50"
quest["job_search"]["options"]["–†–µ–∑–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç"] = "S75"
quest["uni_path"]["options"]["–°–ª—É—á–∞–π–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"] = "S100"

# –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
RANDOM_EVENT_PROB = 0.10
SECRET_EVENT_PROB = 0.03
secret_list = list(secret_nodes.keys())


# =========================
# UI HELPERS
# =========================
def kb_options(options: dict | None) -> ReplyKeyboardMarkup | ReplyKeyboardRemove:
    if not options:
        # –≤ –∫–æ–Ω—Ü–æ–≤–∫–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º /restart –∏ ¬´–ù–∞–∑–∞–¥¬ª
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/restart")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
        )
    rows = [[KeyboardButton(text=opt)] for opt in options.keys()]
    rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


async def send_scene(user_id: int, message: Message):
    data = user_state[user_id]
    node = quest[data["scene"]]
    await message.answer(node["text"], reply_markup=kb_options(node.get("options")))


# =========================
# HANDLERS
# =========================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_state[message.from_user.id] = {"scene": "start", "history": []}
    await message.answer("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –õ—é–±–æ–π —Ñ–∏–Ω–∞–ª ‚Äî —Å–º–µ—Ä—Ç—å. –£–¥–∞—á–∏‚Ä¶")
    await send_scene(message.from_user.id, message)


@dp.message(Command("restart"))
async def cmd_restart(message: Message):
    user_state[message.from_user.id] = {"scene": "start", "history": []}
    await message.answer("üîÑ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
    await send_scene(message.from_user.id, message)


@dp.message(Command("back"))
async def cmd_back(message: Message):
    data = user_state.get(message.from_user.id)
    if not data or not data["history"]:
        await message.answer("‚ùå –ù–∞–∑–∞–¥ –Ω–µ–ª—å–∑—è ‚Äî –≤—ã –≤ –Ω–∞—á–∞–ª–µ.")
        return
    data["scene"] = data["history"].pop()
    await message.answer("üîô –®–∞–≥ –Ω–∞–∑–∞–¥.")
    await send_scene(message.from_user.id, message)


@dp.message()
async def any_text(message: Message):
    uid = message.from_user.id
    data = user_state.get(uid)
    if not data:
        await message.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    if message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await cmd_back(message)
        return

    current = quest[data["scene"]]
    options = current.get("options", {})

    if message.text not in options:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return

    # –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä/—Å–µ–∫—Ä–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–Ω—Ü–æ–≤–∫–∞
    next_key = options[message.text]

    if quest.get(next_key, {}).get("options", None):  # –Ω–µ –∫–æ–Ω—Ü–æ–≤–∫–∞
        # —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –≤–µ—Ç–∫–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º
        if random.random() < SECRET_EVENT_PROB:
            next_key = random.choice(secret_list)
        # –≤–Ω–µ–∑–∞–ø–Ω–∞—è —Å–º–µ—Ä—Ç—å (—Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä)
        elif random.random() < RANDOM_EVENT_PROB and random_death_keys:
            next_key = random.choice(random_death_keys)

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–≤–∏–≥–∞–µ–º—Å—è
    data["history"].append(data["scene"])
    data["scene"] = next_key
    await send_scene(uid, message)


# =========================
# RUN
# =========================
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
