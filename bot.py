# bot.py ‚Äî aiogram 3.x + Flask keep-alive for Render (120 –∫–æ–Ω—Ü–æ–≤–æ–∫, –±–µ–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–º–µ—Ä—Ç–µ–π)
import os
import asyncio
import logging
import threading
from flask import Flask

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

# =========================
# ENV & LOGGING
# =========================
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TELEGRAM_TOKEN", "PASTE_YOUR_TOKEN_HERE")
PORT = int(os.getenv("PORT", "8080"))

if not TOKEN or TOKEN == "PASTE_YOUR_TOKEN_HERE":
    print("‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN!")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# =========================
# Flask keep-alive (Render)
# =========================
app = Flask(__name__)

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üí°"

def run_web():
    app.run(host="0.0.0.0", port=PORT)

threading.Thread(target=run_web, daemon=True).start()

# =========================
# GAME DATA (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ, 120 –∫–æ–Ω—Ü–æ–≤–æ–∫)
# =========================
user_state: dict[int, dict] = {}  # { user_id: {"scene": str, "history": [str,...]} }

def kb(options: dict | None) -> ReplyKeyboardMarkup | ReplyKeyboardRemove:
    if not options:
        # —Ñ–∏–Ω–∞–ª–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º /restart –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∑–∞—Ö–æ—á–µ—Ç –æ—Ç—ã–≥—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥)
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/restart")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
        )
    rows = [[KeyboardButton(text=opt)] for opt in options.keys()]
    rows.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def ending(text: str) -> str:
    return f"{text}\n\n/restart - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"

# –ë–∞–∑–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã —Å–º–µ—Ä—Ç–µ–π, –±—É–¥–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
DEATH_LINES = [
    "‚ö∞Ô∏è –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–±–æ—Ä–≤–∞–ª–∞—Å—å –≤ —Ç–∏—à–∏–Ω–µ.",
    "üíÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä –æ–∫–∞–∑–∞–ª—Å—è —Ä–æ–∫–æ–≤—ã–º.",
    "‚ò†Ô∏è –í—Å—ë –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.",
    "üåë –ù–æ—á—å –Ω–∞–∫—Ä—ã–ª–∞ —Ç–µ–±—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ.",
    "üî• –ò—Å–∫—Ä–∞ –∂–∏–∑–Ω–∏ –ø–æ–≥–∞—Å–ª–∞.",
    "üïØ –°–≤–µ—á–∞ —Å—É–¥—å–±—ã –¥–æ–≥–æ—Ä–µ–ª–∞.",
    "üßä –°–µ—Ä–¥—Ü–µ –∑–∞—Å—Ç—ã–ª–æ –±–µ–∑ —Å–ª–æ–≤.",
    "üï≥ –¢—å–º–∞ –ø–æ–≥–ª–æ—Ç–∏–ª–∞ —Ç–µ–±—è.",
    "ü™¶ –ù–∞ —ç—Ç–æ–º –ø—É—Ç–∏ –Ω–µ –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—Ç–∞.",
    "‚ö° –°—É–¥—å–±–∞ —É–¥–∞—Ä–∏–ª–∞ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.",
    "üåÄ –ú–∏—Ä —Å–æ–º–∫–Ω—É–ª—Å—è –Ω–∞–¥ —Ç–æ–±–æ–π.",
    "üß© –ü–∞–∑–ª –∂–∏–∑–Ω–∏ –Ω–µ —Å–ª–æ–∂–∏–ª—Å—è.",
    "üå´ –¢—ã —Ä–∞—Å—Ç–≤–æ—Ä–∏–ª—Å—è –≤ —Ç—É–º–∞–Ω–µ —Å–æ–±—ã—Ç–∏–π.",
    "üõë –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç —Ç–∞–∫ –∏ –Ω–µ —Å–º–µ–Ω–∏–ª—Å—è.",
    "üåã –ü–æ—Ç–æ–∫ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ —Å–º—ë–ª —Ç–µ–±—è.",
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–≤–µ—Å—Ç-—Å–ª–æ–≤–∞—Ä—å
quest: dict[str, dict] = {
    "start": {
        "text": "–¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—à—å –∂–∏–∑–Ω—å?",
        "options": {
            "üéì –®–∫–æ–ª–∞ –∏ —ç–∫–∑–∞–º–µ–Ω—ã": "H_SCHOOL",
            "üè† –î–æ–º –∏ –±—ã—Ç": "H_HOME",
            "üåÜ –£–ª–∏—Ü–∞ –∏ –≥–æ—Ä–æ–¥": "H_CITY",
            "üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ –¥–µ–Ω—å–≥–∏": "H_CAREER",
        }
    },
    # –•–∞–±—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    "H_SCHOOL": {
        "text": "–®–∫–æ–ª—å–Ω—ã–µ –∫–æ—Ä–∏–¥–æ—Ä—ã –∏ –∑–∞–ø–∞—Ö –¥–æ—Å–∫–∏. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë—à—å?",
        "options": {f"–í–µ—Ç–∫–∞ —à–∫–æ–ª—ã #{i}": f"S{i}" for i in range(1, 11)}  # S1..S10
    },
    "H_HOME": {
        "text": "–î–æ–º–∞—à–Ω–∏–π —É—é—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –±–µ–∑–æ–ø–∞—Å–µ–Ω. –ö—É–¥–∞ –ø–æ—Ç—è–Ω–µ—Ç?",
        "options": {f"–í–µ—Ç–∫–∞ –¥–æ–º–∞ #{i}": f"S{i}" for i in range(11, 21)}  # S11..S20
    },
    "H_CITY": {
        "text": "–®—É–º–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–ª–æ–Ω —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. –í—ã–±–∏—Ä–∞–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.",
        "options": {f"–í–µ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ #{i}": f"S{i}" for i in range(21, 31)}  # S21..S30
    },
    "H_CAREER": {
        "text": "–ö–∞–±–∏–Ω–µ—Ç—ã, –¥–µ–¥–ª–∞–π–Ω—ã, –∞–º–±–∏—Ü–∏–∏. –ß—Ç–æ –≤–ø–µ—Ä–µ–¥–∏?",
        "options": {f"–í–µ—Ç–∫–∞ –∫–∞—Ä—å–µ—Ä—ã #{i}": f"S{i}" for i in range(31, 41)}  # S31..S40
    },
}

# –ù–∞–ø–æ–ª–Ω—è–µ–º 40 ¬´–ø–æ–¥—Ö–∞–±–æ–≤¬ª S1..S40, –∫–∞–∂–¥—ã–π —Å 3 –≤—ã–±–æ—Ä–æ–º ‚Äî –∏—Ç–æ–≥–æ 120 –∫–æ–Ω—Ü–æ–≤–æ–∫
# Sx -> {A,B,C} -> D(x,1..3) (–∫–∞–∂–¥—ã–π ‚Äî —Ñ–∏–Ω–∞–ª —Å–æ —Å–º–µ—Ä—Ç—å—é)
# –î–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∑–∞–¥–∞–¥–∏–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥–ø–∏c–∏.
CHOICES = [
    ("A", "–ü–æ–π—Ç–∏ –Ω–∞–ø—Ä–æ–ª–æ–º"),
    ("B", "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏"),
    ("C", "–î–æ–≤–µ—Ä–∏—Ç—å—Å—è —Å–ª—É—á–∞—é"),
]

ending_counter = 0
for s in range(1, 41):  # S1..S40
    skey = f"S{s}"
    # –¢–µ–∫—Å—Ç –ø–æ–¥—Ö–∞–±–∞ ‚Äî —Ä–∞–∑–Ω—ã–π –ø–æ –∑–æ–Ω–µ
    if 1 <= s <= 10:
        hub_text = f"–®–∫–æ–ª–∞ ‚Äî –≤–µ—Ç–∫–∞ #{s}. –≠–∫–∑–∞–º–µ–Ω—ã, –¥—Ä—É–∑—å—è, —Å–ø–æ—Ä—Ç, –¥–∞–≤–ª–µ–Ω–∏–µ –≤–∑—Ä–æ—Å–ª—ã—Ö. –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—à—å?"
    elif 11 <= s <= 20:
        hub_text = f"–î–æ–º ‚Äî –≤–µ—Ç–∫–∞ #{s}. –°–µ–º—å—è, —Å–æ—Å–µ–¥–∏, –±—ã—Ç, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏. –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?"
    elif 21 <= s <= 30:
        hub_text = f"–ì–æ—Ä–æ–¥ ‚Äî –≤–µ—Ç–∫–∞ #{s}. –ú–µ—Ç—Ä–æ, –±–∞–Ω–¥–∏—Ç—ã, –≤–∏—Ç—Ä–∏–Ω—ã, –ø–æ–¥–≤–æ—Ä–æ—Ç–Ω–∏. –¢–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥?"
    else:
        hub_text = f"–ö–∞—Ä—å–µ—Ä–∞ ‚Äî –≤–µ—Ç–∫–∞ #{s}. –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, –Ω–∞—á–∞–ª—å–Ω–∏–∫–∏, —Å–¥–µ–ª–∫–∏, –∫—Ä–µ–¥–∏—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∏–º?"

    quest[skey] = {"text": hub_text, "options": {}}

    for idx, (letter, caption) in enumerate(CHOICES, start=1):
        ending_counter += 1
        dkey = f"D{s}_{idx}"  # —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞
        death_line = DEATH_LINES[(ending_counter - 1) % len(DEATH_LINES)]
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–º –ø–æ–¥–ø–∏—Å—å —Ñ–∏–Ω–∞–ª–∞ –ª—ë–≥–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if 1 <= s <= 10:
            context = "–®–∫–æ–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–æ–∑–≤–µ–Ω–µ–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑."
        elif 11 <= s <= 20:
            context = "–î–æ–º–∞—à–Ω–∏–π —Å–≤–µ—Ç –ø–æ–≥–∞—Å –Ω–∞–≤—Å–µ–≥–¥–∞."
        elif 21 <= s <= 30:
            context = "–ì–æ—Ä–æ–¥—Å–∫–∏–µ –æ–≥–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ –º–∞–Ω—è—Ç."
        else:
            context = "–ü–æ–≥–æ–Ω—è –∑–∞ –∫–∞—Ä—å–µ—Ä–æ–π –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø—É—Å—Ç–æ—Ç–æ–π."

        quest[dkey] = {
            "text": ending(f"{death_line}\n\n{context}"),
            "options": {}
        }
        quest[skey]["options"][f"{caption}"] = dkey

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ¬´—Ä—É—á–Ω—ã–µ¬ª —Å—Ü–µ–Ω—ã –¥–ª—è –≤–∫—É—Å–∞ (–≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ–¥—É—Ç –≤ —Ö–∞–±—ã)
quest["school_entry"] = {
    "text": "–¢—ã —Å—Ç–æ–∏—à—å —É –¥–≤–µ—Ä–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç. –í–¥–æ—Ö-–≤—ã–¥–æ—Ö. –®–∞–≥–Ω—É—Ç—å –≤–Ω—É—Ç—Ä—å?",
    "options": {
        "–í–æ–π—Ç–∏ –∏ —Å–¥–∞—Ç—å —Ç–µ—Å—Ç": "H_SCHOOL",
        "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π": "H_HOME",
        "–°–≤–µ—Ä–Ω—É—Ç—å –∫ –º–µ—Ç—Ä–æ": "H_CITY",
    }
}
quest["home_entry"] = {
    "text": "–ö–ª—é—á –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –∑–∞–º–∫–µ. –¢–∏—à–∏–Ω–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
    "options": {
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º": "H_HOME",
        "–í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤—ã–π—Ç–∏": "H_CITY",
        "–û—Ç–∫—Ä—ã—Ç—å –Ω–æ—É—Ç–±—É–∫ –∏ —Ä–∞–±–æ—Ç–∞—Ç—å": "H_CAREER",
    }
}

# –°–≤—è–∂–µ–º —Å—Ç–∞—Ä—Ç –µ—â—ë –∏ —Å —Ä—É—á–Ω—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏
quest["start"]["options"]["üö™ –ó–∞–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç"] = "school_entry"
quest["start"]["options"]["üîë –û—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥–Ω—É—é –¥–≤–µ—Ä—å"] = "home_entry"


async def send_scene(user_id: int, message: Message):
    node = quest[user_state[user_id]["scene"]]
    await message.answer(node["text"], reply_markup=kb(node.get("options")))

# =========================
# HANDLERS
# =========================
@dp.message(Command("start", "restart"))
async def cmd_start(message: Message):
    user_state[message.from_user.id] = {"scene": "start", "history": []}
    await send_scene(message.from_user.id, message)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def cmd_back(message: Message):
    data = user_state.get(message.from_user.id)
    if not data or not data["history"]:
        await message.answer("–ù–∞–∑–∞–¥ –Ω–µ–ª—å–∑—è.", reply_markup=ReplyKeyboardRemove())
        return
    data["scene"] = data["history"].pop()
    await send_scene(message.from_user.id, message)

@dp.message()
async def handle_choice(message: Message):
    uid = message.from_user.id
    data = user_state.setdefault(uid, {"scene": "start", "history": []})
    current = quest[data["scene"]]
    options = current.get("options", {})

    # –ö–æ–º–∞–Ω–¥–∞ /restart —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–ª–∞–≤—ã –Ω–µ—Ç)
    if message.text.strip() == "/restart":
        await cmd_start(message)
        return

    if message.text not in options:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–≤–∏–≥–∞–µ–º—Å—è
    data["history"].append(data["scene"])
    data["scene"] = options[message.text]
    await send_scene(uid, message)

# =========================
# RUN
# =========================
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶ –∫–æ–Ω—Ü–æ–≤–æ–∫:", sum(1 for k, v in quest.items() if not v.get("options")))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

